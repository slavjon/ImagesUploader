{"version":3,"sources":["upload.js","app.js"],"names":["formatBytes","a","b","c","d","Math","floor","log","parseFloat","pow","toFixed","element","tag","classes","content","node","document","createElement","length","classList","add","textContent","upload","selector","options","files","previewGrid","input","querySelector","open","style","display","multi","setAttribute","accept","Array","isArray","join","insertAdjacentElement","addEventListener","click","event","target","from","innerHTML","forEach","file","type","match","reader","FileReader","onload","ev","src","result","insertAdjacentHTML","name","size","readAsDataURL","dataset","filter","removeBlock","closest","setTimeout","remove"],"mappings":"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","file":"app.0157a8d7.js","sourceRoot":"../src","sourcesContent":["//transform bites to KB function\r\nfunction formatBytes(a, b = 2) {\r\n    if (0 === a) return \"0 Bytes\";\r\n    const c = 0 > b ? 0 : b,\r\n        d = Math.floor(Math.log(a) / Math.log(1024));\r\n    return parseFloat((a / Math.pow(1024, d)).toFixed(c)) + \" \" + [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"][d]\r\n}\r\n\r\n// helper function for create new html elements\r\nconst element = (tag, classes = [], content) => {\r\n\r\n    const node = document.createElement(tag);\r\n\r\n    if (classes.length) {\r\n        node.classList.add(...classes);\r\n    }\r\n    if (content) {\r\n        node.textContent = content;\r\n    }\r\n    return node;\r\n}\r\n\r\nexport function upload(selector, options = {}) {\r\n\r\n    let files = []; //all added files array\r\n    const previewGrid = element('div', ['preview__grid']);\r\n    const input = document.querySelector(selector);\r\n    const open = element('button', ['btn'], 'Open images');\r\n    const upload = element('button', ['btn', 'primary'], 'Download');\r\n    upload.style.display = 'none';\r\n\r\n    if (options.multi) {\r\n        input.setAttribute('multiple', true);\r\n    }\r\n\r\n    if (options.accept && Array.isArray(options.accept)) {\r\n        input.setAttribute('accept', options.accept.join(','))\r\n    }\r\n\r\n    input.insertAdjacentElement('afterend', previewGrid);\r\n    input.insertAdjacentElement('afterend', upload);\r\n    input.insertAdjacentElement('afterend', open);\r\n\r\n    const triggerInput = () => input.click();\r\n\r\n    const changeHundler = event => {\r\n        if (!event.target.files.length) {\r\n            return;\r\n        }\r\n\r\n        files = Array.from(event.target.files);\r\n\r\n        previewGrid.innerHTML = '';\r\n        upload.style.display = 'inline-block';\r\n\r\n        files.forEach(file => {\r\n            if (!file.type.match('image')) {\r\n                return;\r\n            }\r\n\r\n            const reader = new FileReader();\r\n\r\n            reader.onload = ev => {\r\n                const src = ev.target.result;\r\n                previewGrid.insertAdjacentHTML('afterbegin',\r\n                    `<div class=\"preview__img\">\r\n                        <div class=\"preview__remove\" data-name=\"${file.name}\">&times;</div>\r\n                        <img src=\"${src}\" alt=\"${file.name}\">\r\n                        <div class=\"preview__panel\">\r\n                            <div class=\"name\">${file.name}</div>\r\n                            <div class=\"size\">Size: ${formatBytes(file.size, 0)}</div>\r\n                        </div>\r\n                    </div>\r\n                    `);\r\n            }\r\n            reader.readAsDataURL(file);\r\n        });\r\n    }\r\n    const removeImgHandler = event => {\r\n        if (!event.target.dataset.name) {\r\n            return\r\n        }\r\n        const { name } = event.target.dataset;\r\n        files = files.filter(file => file.name !== name);\r\n\r\n        if (!files.length) {\r\n            upload.style.display = 'none';\r\n        }\r\n\r\n        const removeBlock = previewGrid\r\n            .querySelector(`[data-name=\"${name}\"]`).closest('.preview__img');\r\n        removeBlock.classList.add('removing-animation');\r\n        setTimeout(() => removeBlock.remove(), 200);\r\n    }\r\n\r\n    open.addEventListener('click', triggerInput);\r\n    input.addEventListener('change', changeHundler);\r\n    previewGrid.addEventListener('click', removeImgHandler);\r\n}","import { upload } from './upload.js';\r\n\r\nupload('#file', {\r\n    multi: true, // param to add many images\r\n    accept: ['.png', '.jpg', '.jpeg', '.webp'] //allow to images format\r\n});"]}